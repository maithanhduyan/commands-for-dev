{
    "swagger": "2.0",
    "info": {
        "title": "go-fiber-boilerplate API documentation",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://github.com/indrayyana/go-fiber-boilerplate/blob/main/LICENSE"
        },
        "version": "1.0.0"
    },
    "host": "localhost:3000",
    "basePath": "/v1",
    "paths": {
        "/auth/forgot-password": {
            "post": {
                "description": "An email will be sent to reset password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.ForgotPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.ForgotPasswordResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/auth/google": {
            "get": {
                "description": "This route initiates the Google OAuth2 login flow. Please try this in your browser.",
                "tags": [
                    "Auth"
                ],
                "summary": "Login with google",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GoogleLoginResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/example.FailedLogin"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.LogoutResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            }
        },
        "/auth/refresh-tokens": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh auth tokens",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/example.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.RefreshTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register as user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.Register"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.RegisterResponse"
                        }
                    },
                    "409": {
                        "description": "Email already taken",
                        "schema": {
                            "$ref": "#/definitions/example.DuplicateEmail"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The reset password token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdatePassOrVerify"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.ResetPasswordResponse"
                        }
                    },
                    "401": {
                        "description": "Password reset failed",
                        "schema": {
                            "$ref": "#/definitions/example.FailedResetPassword"
                        }
                    }
                }
            }
        },
        "/auth/send-verification-email": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "An email will be sent to verify email.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Send verification email",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.SendVerificationEmailResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    }
                }
            }
        },
        "/auth/verify-email": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The verify email token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.VerifyEmailResponse"
                        }
                    },
                    "401": {
                        "description": "Verify email failed",
                        "schema": {
                            "$ref": "#/definitions/example.FailedVerifyEmail"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only admins can retrieve all users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of users",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by name or email or role",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetAllUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only admins can create other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.CreateUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/example.CreateUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "409": {
                        "description": "Email already taken",
                        "schema": {
                            "$ref": "#/definitions/example.DuplicateEmail"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can fetch only their own user information. Only admins can fetch other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.GetUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can delete only themselves. Only admins can delete other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.DeleteUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logged in users can only update their own information. Only admins can update other users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/validation.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.UpdateUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/example.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/example.Forbidden"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/example.NotFound"
                        }
                    },
                    "409": {
                        "description": "Email already taken",
                        "schema": {
                            "$ref": "#/definitions/example.DuplicateEmail"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "example.CreateUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 201
                },
                "message": {
                    "type": "string",
                    "example": "Create user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.DeleteUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Delete user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.DuplicateEmail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 409
                },
                "message": {
                    "type": "string",
                    "example": "Email already taken"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FailedLogin": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "Invalid email or password"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FailedResetPassword": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "Password reset failed"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.FailedVerifyEmail": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "Verify email failed"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.Forbidden": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 403
                },
                "message": {
                    "type": "string",
                    "example": "You don't have permission to access this resource"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.ForgotPasswordResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "A password reset link has been sent to your email address."
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.GetAllUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "message": {
                    "type": "string",
                    "example": "Get all users successfully"
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.User"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "total_pages": {
                    "type": "integer",
                    "example": 1
                },
                "total_results": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "example.GetUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Get user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.GoogleLoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Login successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                },
                "user": {
                    "$ref": "#/definitions/example.GoogleUser"
                }
            }
        },
        "example.GoogleUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "fake@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "e088d183-9eea-4a11-8d5d-74d7ec91bdf5"
                },
                "name": {
                    "type": "string",
                    "example": "fake name"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "verified_email": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "example.LoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Login successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.LogoutResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Logout successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.NotFound": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "message": {
                    "type": "string",
                    "example": "Not found"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.RefreshToken": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
                }
            }
        },
        "example.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                }
            }
        },
        "example.RegisterResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 201
                },
                "message": {
                    "type": "string",
                    "example": "Register successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "tokens": {
                    "$ref": "#/definitions/example.Tokens"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.ResetPasswordResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Update password successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.SendVerificationEmailResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Please check your email for a link to verify your account"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "example.TokenExpires": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "string",
                    "example": "2024-10-07T11:56:46.618180553Z"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
                }
            }
        },
        "example.Tokens": {
            "type": "object",
            "properties": {
                "access": {
                    "$ref": "#/definitions/example.TokenExpires"
                },
                "refresh": {
                    "$ref": "#/definitions/example.TokenExpires"
                }
            }
        },
        "example.Unauthorized": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "Please authenticate"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "example.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Update user successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                },
                "user": {
                    "$ref": "#/definitions/example.User"
                }
            }
        },
        "example.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "fake@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "e088d183-9eea-4a11-8d5d-74d7ec91bdf5"
                },
                "name": {
                    "type": "string",
                    "example": "fake name"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "verified_email": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "example.VerifyEmailResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "Verify email successfully"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "validation.CreateUser": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                },
                "role": {
                    "type": "string",
                    "maxLength": 50,
                    "enum": [
                        "user",
                        "admin"
                    ],
                    "example": "user"
                }
            }
        },
        "validation.ForgotPassword": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                }
            }
        },
        "validation.Login": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                }
            }
        },
        "validation.Register": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                }
            }
        },
        "validation.UpdatePassOrVerify": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                }
            }
        },
        "validation.UpdateUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "fake name"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 8,
                    "example": "password1"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Example Value: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}