import os
import ast
import argparse

WARNING_LINE_LIMIT = 50  # C·∫£nh b√°o n·∫øu h√†m > 50 d√≤ng

def analyze_file(filepath):
    with open(filepath, "r", encoding="utf-8") as f:
        try:
            tree = ast.parse(f.read(), filename=filepath)
        except SyntaxError:
            print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ ph√¢n t√≠ch file: {filepath}")
            return

    for node in ast.walk(tree):
        if isinstance(node, ast.FunctionDef):
            start_line = node.lineno
            end_line = max(getattr(n, "lineno", start_line) for n in ast.walk(node))
            length = end_line - start_line + 1

            if length > WARNING_LINE_LIMIT:
                print(f"üö® [D√ÄI] H√†m '{node.name}' trong {filepath}:{start_line} d√†i {length} d√≤ng.")

            # T√¨m v√≤ng l·∫∑p ch·ª©a I/O
            for subnode in ast.walk(node):
                if isinstance(subnode, (ast.For, ast.While)):
                    for body_node in subnode.body:
                        if isinstance(body_node, ast.Expr) and isinstance(body_node.value, ast.Call):
                            func = getattr(body_node.value.func, 'attr', '') or getattr(body_node.value.func, 'id', '')
                            if func in ['get', 'post', 'open']:
                                print(f"‚ö†Ô∏è  [I/O trong v√≤ng l·∫∑p] H√†m '{node.name}' g·ªçi '{func}()' trong v√≤ng l·∫∑p t·∫°i {filepath}:{subnode.lineno}")

def analyze_project(root_folder):
    for dirpath, _, files in os.walk(root_folder):
        for file in files:
            if file.endswith(".py"):
                filepath = os.path.join(dirpath, file)
                analyze_file(filepath)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Ph√¢n t√≠ch project Python ƒë·ªÉ t√¨m v·∫•n ƒë·ªÅ hi·ªáu su·∫•t/m·ªü r·ªông.")
    parser.add_argument("path", help="ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a m√£ ngu·ªìn Python")
    args = parser.parse_args()

    print(f"üîç Ph√¢n t√≠ch project: {args.path}\n")
    analyze_project(args.path)
    print("\n‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t.")